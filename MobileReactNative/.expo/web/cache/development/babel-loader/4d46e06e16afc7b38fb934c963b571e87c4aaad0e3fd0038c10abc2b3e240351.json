{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context';\nimport styles from \"../App.styles\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useFonts } from 'expo-font';\nimport { Ionicons, FontAwesome, FontAwesome5, Entypo, EvilIcons, Feather, MaterialCommunityIcons, MaterialIcons, AntDesign } from \"@expo/vector-icons\";\nimport Axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction Register(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPassword = _useState2[0],\n    setShowPassword = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    jsonplaceholder = _useState4[0],\n    setjsonplaceholder = _useState4[1];\n  var _useFonts = useFonts({\n      'Kaushan': require(\"../assets/fonts/KaushanScript-Regular.ttf\"),\n      \"Allura\": require(\"../assets/fonts/Allura-Regular.ttf\"),\n      \"Montserrat-Black\": require(\"../assets/fonts/Montserrat-Black.ttf\"),\n      \"Montserrat-BlackItalic\": require(\"../assets/fonts/Montserrat-BlackItalic.ttf\"),\n      \"Montserrat-Bold\": require(\"../assets/fonts/Montserrat-Bold.ttf\"),\n      \"Montserrat-BoldItalic\": require(\"../assets/fonts/Montserrat-BoldItalic.ttf\"),\n      \"Montserrat-Italic\": require(\"../assets/fonts/Montserrat-Italic.ttf\"),\n      \"Montserrat-Light\": require(\"../assets/fonts/Montserrat-Light.ttf\"),\n      \"Montserrat-LightItalic\": require(\"../assets/fonts/Montserrat-LightItalic.ttf\"),\n      \"Montserrat-Medium\": require(\"../assets/fonts/Montserrat-Medium.ttf\"),\n      \"Montserrat-MediumItalic\": require(\"../assets/fonts/Montserrat-MediumItalic.ttf\"),\n      \"Montserrat-Regular\": require(\"../assets/fonts/Montserrat-Regular.ttf\"),\n      \"Montserrat-Thin\": require(\"../assets/fonts/Montserrat-Thin.ttf\"),\n      \"Montserrat-SemiBold\": require(\"../assets/fonts/Montserrat-SemiBold.ttf\"),\n      \"Montserrat-SemiBoldItalic\": require(\"../assets/fonts/Montserrat-SemiBoldItalic.ttf\"),\n      \"Montserrat-ThinItalic\": require(\"../assets/fonts/Montserrat-ThinItalic.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(SafeAreaView, {\n    style: styles.SafeAreaView,\n    children: _jsx(View, {\n      style: {\n        width: \"100%\",\n        padding: 10,\n        alignItems: \"center\",\n        flex: 1\n      }\n    })\n  });\n}\nexport default Register;","map":{"version":3,"names":["React","useState","useCallback","useEffect","TouchableOpacity","View","Image","ImageBackground","Text","ScrollView","SafeAreaProvider","SafeAreaView","styles","TextInput","useFonts","Ionicons","FontAwesome","FontAwesome5","Entypo","EvilIcons","Feather","MaterialCommunityIcons","MaterialIcons","AntDesign","Axios","jsx","_jsx","Register","_ref","navigation","_useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","jsonplaceholder","setjsonplaceholder","_useFonts","require","_useFonts2","fontsLoaded","onLayoutRootView","_asyncToGenerator","SplashScreen","hideAsync","style","children","width","padding","alignItems","flex"],"sources":["C:/Users/oy200/Desktop/nexusmatch/pages/Register.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { TouchableOpacity } from 'react-native';\r\nimport { View, Image, ImageBackground, Text, ScrollView } from 'react-native'\r\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context';\r\nimport styles from '../App.styles';\r\nimport { TextInput } from 'react-native';\r\nimport { useFonts } from 'expo-font';\r\nimport { Ionicons, FontAwesome, FontAwesome5, Entypo, EvilIcons, Feather, MaterialCommunityIcons, MaterialIcons, AntDesign } from \"react-native-vector-icons\"\r\nimport Axios from 'axios';\r\n\r\n\r\nfunction Register({ navigation }) {\r\n\r\n    const [showPassword, setShowPassword] = useState(true);\r\n    const [jsonplaceholder, setjsonplaceholder] = useState({});\r\n\r\n    /* useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\r\n                const jsonData = await response.json();\r\n                console.log(jsonData);\r\n                setjsonplaceholder(jsonData);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchData(); // Fetch data when the component mounts\r\n    }, []); // The empty array [] as the second argument ensures the effect runs once\r\n */\r\n\r\n\r\n    /* useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await Axios.get('https://jsonplaceholder.typicode.com/users/1');\r\n                const jsonData = response.data;\r\n                console.log(jsonData);\r\n                setjsonplaceholder(jsonData);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchData(); // Fetch data when the component mounts\r\n    }, []); */\r\n\r\n    const [fontsLoaded] = useFonts({\r\n        'Kaushan': require('../assets/fonts/KaushanScript-Regular.ttf'),\r\n        \"Allura\": require('../assets/fonts/Allura-Regular.ttf'),\r\n        \"Montserrat-Black\": require('../assets/fonts/Montserrat-Black.ttf'),\r\n        \"Montserrat-BlackItalic\": require('../assets/fonts/Montserrat-BlackItalic.ttf'),\r\n        \"Montserrat-Bold\": require('../assets/fonts/Montserrat-Bold.ttf'),\r\n        \"Montserrat-BoldItalic\": require('../assets/fonts/Montserrat-BoldItalic.ttf'),\r\n        \"Montserrat-Italic\": require('../assets/fonts/Montserrat-Italic.ttf'),\r\n        \"Montserrat-Light\": require('../assets/fonts/Montserrat-Light.ttf'),\r\n        \"Montserrat-LightItalic\": require('../assets/fonts/Montserrat-LightItalic.ttf'),\r\n        \"Montserrat-Medium\": require('../assets/fonts/Montserrat-Medium.ttf'),\r\n        \"Montserrat-MediumItalic\": require('../assets/fonts/Montserrat-MediumItalic.ttf'),\r\n        \"Montserrat-Regular\": require('../assets/fonts/Montserrat-Regular.ttf'),\r\n        \"Montserrat-Thin\": require('../assets/fonts/Montserrat-Thin.ttf'),\r\n        \"Montserrat-SemiBold\": require('../assets/fonts/Montserrat-SemiBold.ttf'),\r\n        \"Montserrat-SemiBoldItalic\": require('../assets/fonts/Montserrat-SemiBoldItalic.ttf'),\r\n        \"Montserrat-ThinItalic\": require('../assets/fonts/Montserrat-ThinItalic.ttf'),\r\n    });\r\n\r\n    const onLayoutRootView = useCallback(async () => {\r\n        if (fontsLoaded) {\r\n            await SplashScreen.hideAsync();\r\n        }\r\n    }, [fontsLoaded]);\r\n\r\n    if (!fontsLoaded) {\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <SafeAreaView style={styles.SafeAreaView}>\r\n\r\n            \r\n            <View style={{ width: \"100%\", padding: 10, alignItems: \"center\", flex: 1, }}>\r\n\r\n\r\n            </View>\r\n\r\n\r\n\r\n\r\n        </SafeAreaView>\r\n    )\r\n}\r\nexport default Register;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAG/D,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,gCAAgC;AAC/E,OAAOC,MAAM;AAAsB,OAAAC,SAAA;AAEnC,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,EAAEC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,sBAAsB,EAAEC,aAAa,EAAEC,SAAS;AAC1H,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAG1B,SAASC,QAAQA,CAAAC,IAAA,EAAiB;EAAA,IAAdC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAE1B,IAAAC,SAAA,GAAwC7B,QAAQ,CAAC,IAAI,CAAC;IAAA8B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/CG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EACpC,IAAAI,UAAA,GAA8ClC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAAmC,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAnDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAkC1C,IAAAG,SAAA,GAAsBzB,QAAQ,CAAC;MAC3B,SAAS,EAAE0B,OAAO,4CAA4C,CAAC;MAC/D,QAAQ,EAAEA,OAAO,qCAAqC,CAAC;MACvD,kBAAkB,EAAEA,OAAO,uCAAuC,CAAC;MACnE,wBAAwB,EAAEA,OAAO,6CAA6C,CAAC;MAC/E,iBAAiB,EAAEA,OAAO,sCAAsC,CAAC;MACjE,uBAAuB,EAAEA,OAAO,4CAA4C,CAAC;MAC7E,mBAAmB,EAAEA,OAAO,wCAAwC,CAAC;MACrE,kBAAkB,EAAEA,OAAO,uCAAuC,CAAC;MACnE,wBAAwB,EAAEA,OAAO,6CAA6C,CAAC;MAC/E,mBAAmB,EAAEA,OAAO,wCAAwC,CAAC;MACrE,yBAAyB,EAAEA,OAAO,8CAA8C,CAAC;MACjF,oBAAoB,EAAEA,OAAO,yCAAyC,CAAC;MACvE,iBAAiB,EAAEA,OAAO,sCAAsC,CAAC;MACjE,qBAAqB,EAAEA,OAAO,0CAA0C,CAAC;MACzE,2BAA2B,EAAEA,OAAO,gDAAgD,CAAC;MACrF,uBAAuB,EAAEA,OAAO,4CAA4C;IAChF,CAAC,CAAC;IAAAC,UAAA,GAAAT,cAAA,CAAAO,SAAA;IAjBKG,WAAW,GAAAD,UAAA;EAmBlB,IAAME,gBAAgB,GAAGzC,WAAW,CAAA0C,iBAAA,CAAC,aAAY;IAC7C,IAAIF,WAAW,EAAE;MACb,MAAMG,YAAY,CAACC,SAAS,CAAC,CAAC;IAClC;EACJ,CAAC,GAAE,CAACJ,WAAW,CAAC,CAAC;EAEjB,IAAI,CAACA,WAAW,EAAE;IACd,OAAO,IAAI;EACf;EAIA,OAEIhB,IAAA,CAACf,YAAY;IAACoC,KAAK,EAAEnC,MAAM,CAACD,YAAa;IAAAqC,QAAA,EAGrCtB,IAAA,CAACrB,IAAI;MAAC0C,KAAK,EAAE;QAAEE,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE,EAAE;QAAEC,UAAU,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAG;IAAE,CAGtE;EAAC,CAKG,CAAC;AAEvB;AACA,eAAezB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}